@model HR.Web.ViewModels.BranchLeaveVm
@{
    if (Model.otherLeave != null)
    {
        for (var i = 0; i < Model.otherLeave.Count; i++)
        {
            if (!Model.otherLeave[i].IsCarryForward)
            {
                Model.otherLeave[i].CarryForward = null;
            }
        }
    }

}
@section Styles{
    <style>
        .chkClass {
            position: relative;
            right: 40px;
        }

        /*.width {
            width: 100%;
        }*/
        @@media only screen and (min-width: 1280px) {
            .width {
                width: 75%;
            }
        }

        .icheckbox_flat-blue {
            margin-top: 10px;
        }
        .icheckbox_flat-blue.checked.disabled {
    background-position: -22px 0;
}
        
       
    </style>
}
@using (Html.BeginForm("Leave", "Leave", FormMethod.Post, new { id = "frmLeave", name = "frmLeave" }))
{
    <div class="page">
        <div class="panel panel-default panel-hovered panel-stacked mb10">            
                    <div class="panel-heading">
                        LEAVE POLICY
                    </div>
                  
            @if (ViewBag.RoleCode == UTILITY.ROLE_SUPERADMIN)
            {
                <div class="row css10">
                        <label class="col-md-2 control-label">
                            <span class="pull-right">Branch</span>
                        </label>
                        <div class="col-md-2">
                            @Html.DropDownListFor(x => x.BranchId,
                                         SelectListItemHelper.Branches(),
                                         "Select Branch",
                                         new { @class = "form-control input-sm", onchange = "GetBranchData(this)" })
                        </div>
                    </div>
            
                                  
            }
            else
            {
                @Html.HiddenFor(x => x.BranchId)
            }
                <div class="panel-body">
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Type Of Leave</th>
                                    <th>Per Year</th>
                                    <th>Per Month</th>
                                    <th class="nowrap">Carry Forward</th>
                                    <th class="nowrap">Carry Forward Days(Per Year)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.otherLeave.Count; i++)
                {
                                    @Html.HiddenFor(x => x.otherLeave[i].LeaveId)
                                    @Html.HiddenFor(x => x.otherLeave[i].LeaveTypeId)
                                    @Html.HiddenFor(x => x.otherLeave[i].BranchId)
                                    @Html.HiddenFor(x => x.otherLeave[i].Description)
                                    <tr>
                                        <td>
                                            @Model.otherLeave[i].Description
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(x => x.otherLeave[i].LeavesPerYear,
                           new
                           {
                               @class = "form-control numCss input-sm",
                               onblur = "calcCasualLeave(this," + i + ")",
                               required = "required"
                           })
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(x => x.otherLeave[i].LeavesPerMonth,
                                 new
                                 {
                                     @class = "form-control decimalCss input-sm",
                                     @readonly = "readonly"
                                 })
                                        </td>
                                        <td>
                                            @Html.HiddenFor(x => x.otherLeave[i].IsCarryForward)
                                            @Html.CheckBoxFor(x => x.otherLeave[i].IsCarryForward,
                                            new { @class = "form-control ", @disabled = "disabled" })
                                        </td>

                                        <td>
                                            @if (Model.otherLeave[i].IsCarryForward)
                                            {
                                                @Html.TextBoxFor(x => x.otherLeave[i].CarryForward,new
                                           {
                                               @class = "form-control decimalCss input-sm",
                                               onblur = "CarryFardWard(this," + i + ")",
                                               required = "required"
                                           })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(x => x.otherLeave[i].CarryForward,new
                                           {
                                               @class = "form-control decimalCss input-sm",
                                               disabled = "disabled",
                                               onblur = "CarryFardWard(this," + i + ")"
                                           })
                                            }


                                        </td>


                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="col-md-12">
                            <div class="col-md-6">
                                <button class="btn btn-primary btn-sm" type="button" onclick="SaveLeave()"><i class="fa fa-floppy-o" aria-hidden="true"></i><b>Save</b></button>
                            </div>
                            @if (ViewBag.RoleCode == UTILITY.ROLE_SUPERADMIN)
                            {
                                <div class="col-md-6">
                                    <button class="btn btn-primary btn-sm pull-right" type="button" onclick="location.href='@Url.Content("~/Leave/LeaveList")'"><i class="fa fa-arrow-left"></i><b>Back</b></button>
                                </div>
                            }
                        </div>
                    </div>
                </div>

        </div>
    </div>
}

@using (Html.BeginForm("GetLeaves", "Leave", FormMethod.Post, new { id = "frmGetLeaves", name = "frmGetLeaves" }))
            {
    <input type="hidden" id="hdnBranchId" name="leave.BranchId" />
}


@section Scripts{
    <script type="text/javascript">
        $(function () {
            @{
                <text>
            var count = @Model.otherLeave.Count;
            </text>
            }



            $('#li_Leave').addClass('open');
            $('#li_Leavepolicy').addClass('active');
            $('#li_empdir').addClass('active');

        });


        function calcLeavePerMonth(obj) {
            var peryear = $('#' + obj.id).val();
            var PaidLeavesPerMonth = (peryear / 12).toFixed(2);
            $('#leave_PaidLeavesPerMonth').val(PaidLeavesPerMonth);
        }
        function calcSickLeave(obj) {
            var peryear = $('#' + obj.id).val();
            var PaidLeavesPerMonth = (peryear / 12).toFixed(2);
            $('#leave_SickLeavesPerMonth').val(PaidLeavesPerMonth);
        }

        function calcCasualLeave(obj, i) {
            var peryear = $('#' + obj.id).val();
            var PaidLeavesPerMonth = (peryear / 12).toFixed(2);
            $('#otherLeave_' + i + '__LeavesPerMonth').val(PaidLeavesPerMonth);
        }


        function CarryFardWard(obj, i) {
            debugger;
            var carryfarward = $('#' + obj.id).val();
            var perYear = $('#otherLeave_' + i + '__LeavesPerYear').val();
            if (parseFloat(carryfarward) > parseFloat(perYear)) {

                //$('#errMsg_'+i).show().fadeOut(5000);
                $('#' + obj.id).val('');
                swal(
                  'Oops...',
                  'Leaves Per Month should be less than Leaves Per Year',
                  'error'
                );

            }
        }


        function SaveLeave() {
            $('#frmLeave').validate({
                rules: {
                    CountryCode: {
                        required: true
                    },
                    PaidLeavesPerYear: {
                        required: true,
                        ValidatePaidLeave: true
                    },
                    PaidLeavesPerMonth: {
                        required: true,
                        ValidatePaidLeave: true
                    },
                    CarryForwardPerYear: {
                        required: true,
                        CarryForwardPaidLeave: true
                    },
                    SickLeavesPerYear: {
                        required: true,
                        ValidateSickLeave: true
                    },
                    SickLeavesPerMonth: {
                        required: true,
                        ValidateSickLeave: true
                    },
                    CarryForwardSickLeaves: {
                        required: true,
                        CarryForwardSickLeave: true
                    },
                    CasualLeavesPerYear: {
                        required: true,
                        ValidateCasualLeave: true
                    },
                    CasualLeavesPerMonth: {
                        required: true,
                        ValidateCasualLeave: true
                    },
                    BranchId:{
                        required: true,
                    }
                }
            });
            if ($('#frmLeave').valid()) {
                $('#frmLeave').submit();
                swal({
                    title: "Saved Successfully",
                    text: "",
                    closeOnConfirm: true,
                    confirmButtonText: "Ok",
                    confirmButtonClass: "btn-primary",
                    timer: 5000
                },
                    function () {
                        $.loader({
                            className: "blue-with-image-2",
                            content: '',
                        });
                    })
            }
            else{
                swal("Incorrect Inputs");
            }

        }




        function GetBranchData(el) {

            $('#hdnBranchId').val(el.value);
            $('#frmGetLeaves').submit();

            $.loader({
                className: "blue-with-image-2",
                content: '',
            });
        }

    </script>
}
