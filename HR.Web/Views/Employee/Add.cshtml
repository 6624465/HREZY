@model HR.Web.ViewModels.EmployeeVm

@section Styles{
    <style>
        #error {
            display: none;
            color: Red;
        }

        .icheckbox_flat-blue.checked.disabled {
            background-position: -22px 0;
        }

        .iradio_flat-blue.checked.disabled {
            background-position: -110px 0;
        }

        .panel-height {
            min-height: 461px;
        }
    </style>
}

@{
    var documentdetailidObj = Model.empDocument.Where(x => x.DocumentType == UTILITY.DOCUMENTTYPEID).FirstOrDefault();
    int detailid = 0;
    var filename = "";
    if (documentdetailidObj != null)
    {
        detailid = documentdetailidObj.DocumentDetailId;
        filename = documentdetailidObj.fileName;
    }
}


@using (Html.BeginForm("SaveEmployee", "Employee", FormMethod.Post, new { id = "frmEmp", name = "frmEmp", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(x => x.empHeader.EmployeeId)
    @Html.HiddenFor(x => x.empHeader.BranchId)
    @Html.HiddenFor(x => x.address.AddressId)
    @Html.HiddenFor(x => x.empWorkDetail.WorkDetailID)
    @Html.HiddenFor(x => x.empPersonalDetail.PersonalDetailID)
    @Html.HiddenFor(x => x.empBankdetail.BankDetailId)
    for (var i = 0; i < Model.empDocument.Count(); i++)
    {
        @Html.HiddenFor(x => x.empDocument[i].DocumentDetailId)
    }



    <div class="page">
        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default panel-hovered panel-stacked mb10">
                    <div class="panel-heading">
                        @if (Model.empHeader.EmployeeId != -1)
                        {

                            if (detailid != 0)
                            {
                                <img height="32" width="32"
                                     class="img-circle"
                                     src="@Url.Content("~/Uploads/" + Model.empHeader.EmployeeId + "/" + detailid + "/" + filename)"
                                     onerror="this.src='@Url.Content("~/Images/user.png")'">
                            }
                            else
                            {
                                <img height="32" width="32"
                                     class="img-circle"
                                     src="@Url.Content("~/Images/user.png")" onerror="this.src='@Url.Content("~/images/admin.jpg")'">
                            }

                        }
                        @Model.empHeader.FirstName&nbsp;@Model.empHeader.LastName&nbsp;Profile
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="form-group">
                                <label class="col-md-1 control-label">
                                    <span>ID Type</span>
                                </label>
                                <div class="col-md-5">
                                    @Html.DropDownListFor(x => x.empHeader.IDType,
                            SelectListItemHelper.EmployeeType(),
                                    "Select Type",
                       new { @class = "form-control input-sm" })
                                </div>
                                <label class="col-md-1 control-label">
                                    <span>Date Of Joining</span>
                                </label>
                                <div class="col-md-5">
                                    <div class="input-group date dtCss" id="JoiningDate">
                                        @Html.TextBoxFor(x => x.empWorkDetail.JoiningDate, new { @class = "form-control dtCssTxt input-sm", required = "required" })
                                        <span class="input-group-addon">
                                            <i class="ion ion-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-1 control-label">
                                    <span>First Name</span>
                                </label>
                                <div class="col-md-1">
                                    @Html.DropDownListFor(x => x.empHeader.SalutationType,
SelectListItemHelper.SalutationType(), "Select Salutation",
new { @class = "form-control input-sm" })
                                </div>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(x => x.empHeader.FirstName,
new { @class = "form-control validatename input-sm uppercase", @maxlength = 30 })
                                </div>

                                <label class="col-md-1 control-label">
                                    <span>Gender</span>
                                </label>
                                <div class="col-md-5 name">
                                    <label>
                                        @Html.RadioButtonFor(x => x.empPersonalDetail.Gender, 101, "Male")
                                        <span>Male</span>
                                    </label>
                                    &nbsp;
                                    <label>
                                        @Html.RadioButtonFor(x => x.empPersonalDetail.Gender, 102, "Female")
                                        <span>Female</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-1 control-label">
                                    <span>Middle Name</span>
                                </label>
                                <div class="col-md-5 name">
                                    @Html.TextBoxFor(x => x.empHeader.MiddleName,
new { @class = "form-control validatename input-sm uppercase", @maxlength = 30 })
                                </div>

                                <label class="col-md-1 control-label">
                                    <span>Marital Status</span>
                                </label>
                                <div class="col-md-5">
                                    @Html.DropDownListFor(x => x.empPersonalDetail.MaritalStatus,
SelectListItemHelper.MaritalStatus(), "Select Marital Status",
new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <label class="col-md-1 control-label">
                                <span>Last Name</span>
                            </label>
                            <div class="col-md-5 name">
                                @Html.TextBoxFor(x => x.empHeader.LastName,
new { @class = "form-control validatename input-sm uppercase", @maxlength = 30 })
                            </div>
                            <label class="col-md-1 control-label">
                                <span>Father's Name</span>
                            </label>
                            <div class="col-md-5">
                                @Html.TextBoxFor(x => x.empPersonalDetail.FatherName,
new { @class = "form-control input-sm maxlength uppercase", @maxlength = "30" })
                            </div>

                        </div>
                        <div class="row css5">
                            <label class="col-md-1 control-label">
                                <span>Date Of Birth</span>
                            </label>
                            <div class="col-md-5">
                                <div class="input-group date dtCss" id="DOB">
                                    @Html.TextBoxFor(x => x.empPersonalDetail.DOB, new { @class = "form-control dtCssTxt input-sm" })
                                    <span class="input-group-addon">
                                        <i class="ion ion-calendar"></i>
                                    </span>
                                </div>
                            </div>
                            <label class="col-md-1 control-label">
                                <span>Nationality</span>
                            </label>
                            <div class="col-md-5">
                                @Html.DropDownListFor(x => x.empHeader.Nationality,
SelectListItemHelper.CountryList(), "Select Country",
new { @class = "form-control input-sm" })
                                @*<label class="col-md-2 control-label">
                                                                   <span class="pull-right">Emg. Contact Name</span>
                                                               </label>
                                                               <div class="col-md-4">
                                                                   @Html.TextBoxFor(x => x.empPersonalDetail.EmergencyContactName,
                                    new { @class = "form-control input-sm" })
                                                               </div>*@
                            </div>


                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-1 control-label">
                                    <span>Email</span>
                                </label>


                                @*@if (Model.empHeader.EmployeeId != -1)
                                                            {
                                                                <div class="col-md-5">
                                                                    @Html.TextBoxFor(x => x.empHeader.UserEmailId,
                                    new { @class = "form-control input-sm uppercase", @readonly = "true" })
                                                                </div>
                                                            }
                                                            else
                                                            {*@
                                <div class="col-md-5">
                                    @Html.TextBoxFor(x => x.empHeader.UserEmailId,
new { @class = "form-control input-sm uppercase", onblur = "appendEmail(this," + Model.empHeader.EmployeeId + ")" })
                                    <label id="error">Email Already Exists.Please enter another one</label>
                                </div>
                                @*}*@


                                <label class="col-md-1 control-label">
                                    <span>ID/Passport No</span>
                                </label>
                                <div class="col-md-5">
                                    @Html.TextBoxFor(x => x.empPersonalDetail.PasspostNo,
                                        new { @class = "form-control input-sm uppercase" })
                                </div>

                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-1 control-label">
                                    <span>Mobile</span>
                                </label>
                                <div class="col-md-5">
                                    @Html.TextBoxFor(x => x.address.MobileNo,
new
{
    @class = "form-control numCssPlus input-sm",
    @maxlength = "15"
})
                                </div>

                                <label class="col-md-1 control-label">
                                    <span>EPF No</span>
                                </label>
                                <div class="col-md-5">
                                    @Html.TextBoxFor(x => x.empPersonalDetail.EPFNO,
                                        new { @class = "form-control input-sm uppercase" })
                                    @*@Html.TextBoxFor(x => x.empPersonalDetail.EmergencyContactNumber,
                                        new { @class = "form-control numCssPlus input-sm" })*@
                                </div>
                            </div>


                        </div>

                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-1 control-label">
                                    <span>Employee SSF Number</span>
                                </label>
                                <div class="col-md-5">
                                    @Html.TextBoxFor(x => x.empPersonalDetail.SocialWelfareNo, new
                               {
                                   @class = "form-control input-sm uppercase"
                               })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group" style="white-space:nowrap">
                                <div class="col-md-6">
                                </div>

                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="panel panel-default panel-hovered panel-stacked mb10 panel-height">
                    <div class="panel-heading">Address</div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Address 1</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextAreaFor(x => x.address.Address1, new
                               { @class = "form-control input-sm uppercase", @cols = 80, @rows = 2 })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>City</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(x => x.address.CityName,
     new { @class = "form-control input-sm uppercase" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>State</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(x => x.address.StateName,
     new { @class = "form-control input-sm uppercase" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Postal Code</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(x => x.address.ZipCode,
     new { @class = "form-control numCss input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Country</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(x => x.address.CountryCode, SelectListItemHelper.CountryList(), "Select",
     new { @class = "form-control input-sm uppercase" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="panel panel-default panel-hovered panel-stacked mb10">
                    <div class="panel-heading">Position</div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Job Title</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(x => x.empWorkDetail.DesignationId,
      SelectListItemHelper.Designation((int)ViewData["BranchId"]),
      "Select Designation",
      new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Department</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(x => x.empWorkDetail.DepartmentId,
      SelectListItemHelper.Department(),
      "Select Department",
      new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Notice Period</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(x => x.empWorkDetail.NoticePeriod,
      SelectListItemHelper.NoticePeriod(),
      "Select NoticePeriod",
      new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Probation</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(x => x.empWorkDetail.ProbationPeriod,
      SelectListItemHelper.ProhibationPeriod(),
      "Select Probation",
      new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Confirmation Date</span>
                                </label>
                                <div class="col-md-10">
                                    <div class="input-group date dtCss" id="ConfirmationDate">
                                        @Html.TextBoxFor(x => x.empWorkDetail.ConfirmationDate, new { @class = "form-control dtCssTxt input-sm" })
                                        <span class="input-group-addon">
                                            <i class="ion ion-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Resigned Date</span>
                                </label>
                                <div class="col-md-10">
                                    <div class="input-group date dtCss" id="ResignationDate">
                                        @Html.TextBoxFor(x => x.empWorkDetail.ResignationDate, new { @class = "form-control dtCssTxt input-sm" })
                                        <span class="input-group-addon">
                                            <i class="ion ion-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
							<div class="form-group" style="white-space:nowrap">

								<label class="col-md-2 control-label">
									<span>Reporting To</span>
								</label>

								<div id="isReportingTo">
									<div class="col-md-6">
										@Html.DropDownListFor(x => x.empHeader.ManagerId, SelectListItemHelper.EmployeeList((int)ViewData["BranchId"], true), "Select",
 new { @class = "form-control input-sm" })
									</div>
								</div>
								<div class="col-md-2">
									<label class="col-md-2 control-label"><span>Authorize</span></label>
								</div>
								<div class="col-md-1 pull-left" style="margin-top:10px">
								@Html.CheckBoxFor(x => x.empHeader.IsReportingAuthority)
								</div>
							</div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Send Mails To</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(x => x.empWorkDetail.SendMailsTo, new { @class = "form-control input-sm uppercase", required = "required" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="panel panel-default panel-hovered panel-stacked mb10" style="min-height:310px;">
                    <div class="panel-heading">Login Info</div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Email</span>
                                </label>
                                <div class="col-md-10">
                                    <input type="text" class="form-control input-sm" id="loginEmail" disabled="disabled">
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Password</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.PasswordFor(x => x.empHeader.Password,
     new
     {
         @class = "form-control input-sm",
         value = Model.empHeader.Password,
         @maxlength = "15",
         @minlength = "5"
     })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span style="white-space:nowrap">Confirm Password</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.PasswordFor(x => x.empHeader.ConfirmPassword,
     new { @class = "form-control input-sm", value = Model.empHeader.ConfirmPassword })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">

                            <label class="col-md-2 control-label">
                                <span>Status</span>
                            </label>
                            <div class="col-md-2">
                                <div style="margin-top:10px">
                                    @Html.CheckBoxFor(x => x.empHeader.IsActive.Value)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="panel panel-default panel-hovered panel-stacked mb10">
                    <div class="panel-heading">Bank Details</div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Bank Name</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(x => x.empBankdetail.BankName, new { @class = "form-control input-sm uppercase" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Account No</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(x => x.empBankdetail.AccountNo, new { @class = "form-control input-sm numCss" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Account Type</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.DropDownListFor(x => x.empBankdetail.AccountType, SelectListItemHelper.AccountType(), "--Select--", new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>Bank Branch</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(x => x.empBankdetail.BankBranchCode, new { @class = "form-control input-sm uppercase" })
                                </div>
                            </div>
                        </div>
                        <div class="row css5">
                            <div class="form-group">
                                <label class="col-md-2 control-label">
                                    <span>SWIFT Code</span>
                                </label>
                                <div class="col-md-10">
                                    @Html.TextBoxFor(x => x.empBankdetail.SwiftCode, new { @class = "form-control input-sm uppercase" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row css5">
            @*<div class="form-group">
                    <label class="col-md-3 control-label">
                        <span class="pull-right">Link</span>
                    </label>
                    <div class="col-md-9">
                        <select class="form-control input-sm">
                            <option value="BASIC">BASIC STRUCT</option>
                            <option value="HRA">HRA STRUCT</option>
                            <option value="OTHER">OTHER STRUCT</option>
                        </select>
                    </div>
                </div>*@
            <div class="form-group">
                <label class="col-md-3 control-label">
                    <span class="pull-right"></span>
                </label>

            </div>
        </div>


        <div class="row">
            <div class="col-md-12">
                <div class="panel panel-default panel-hovered panel-stacked mb10">
                    <div class="panel-heading">Documents</div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-12">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Document Name</th>
                                            <th>Document Type</th>
                                            <th>Download</th>
                                            <th>Action</th>
                                            @*<th>File</th>*@
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var documentsPath = ViewData["empdocumentsPath"];
                                        }
                                        @for (int i = 0; i < Model.empDocument.Count(); i++)
                                        {
                                            <tr>
                                                <td>@Html.DisplayFor(x => x.empDocument[i].DocumentDescription)</td>
                                                @Html.HiddenFor(x => x.empDocument[i].DocumentType)
                                                <td>
                                                    @Html.TextBoxFor(x => x.empDocument[i].Document, new { type = "file", onchange = "CheckFileName(this)" })

                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrWhiteSpace(Model.empDocument[i].fileName))
                                                    {
                                                        <a href="@Url.Content("~/" + documentsPath + "/" + Model.empDocument[i].DocumentDetailId+"/" + Model.empDocument[i].fileName)" target="_self" download="@Model.empDocument[i].fileName">download</a>
                                                    }
                                                </td>

                                                <td>
                                                    @if (!string.IsNullOrWhiteSpace(Model.empDocument[i].fileName))
                                                    {
                                                        <button class="btn btn-xs  btn-sm ajaxCss btn-danger" type="button"
                                                                style="padding-left: 5px;margin-left: 6px;"
                                                                onclick="location.href='@Url.Content("~/Employee/DeleteEmployeeDocs?docdetailid=" + Model.empDocument[i].DocumentDetailId)'">
                                                            <i class="fa fa-trash-o" style="padding-left: 5px;"></i>
                                                        </button>

                                                    }
                                                </td>

                                                @*<td>
                                                    @if(Model.empDocument[i].fileName != null) {
                                                    <img src="@Url.Content("~/Uploads/"+Model.empHeader.EmployeeId+"/"+Model.empDocument[i].DocumentDetailId +"/" + Model.empDocument[i].fileName)" alt="image" height="50" width="50" />
                                                    }</td>*@
                                            </tr>

                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <button class="btn btn-primary btn-sm" id="btnsave" type="button" onclick="SaveEmployee()"><i class="fa fa-floppy-o" aria-hidden="true"></i>Save</button>
            </div>
            <div class="col-md-6">
                @if (ViewData["RoleCode"].ToString() == UTILITY.ROLE_EMPLOYEE)
                {
                    <button class="btn btn-primary btn-sm pull-right" id="btnback" type="button" onclick="location.href='@Url.Content("~/Dashboard/Index")'"><i class="fa fa-arrow-left"></i><b>Back</b></button>

                }
                else
                {
                    <button class="btn btn-primary btn-sm pull-right" type="button" onclick="location.href='@Url.Content("~/employee/employeedirectory")'"><i class="fa fa-arrow-left"></i><b>Back</b></button>
                }
            </div>
        </div>
    </div>
                                            }



@section Scripts{
    <link rel="stylesheet" href="http://cdn.rawgit.com/Eonasdan/bootstrap-datetimepicker/master/build/css/bootstrap-datetimepicker.min.css" />
    <script type="text/javascript">

        function CheckFileName(el) {
            var fileName = document.getElementById(el.id).value;
            if (fileName == "") {
                alert("Browse to upload a valid File with png/jpeg/jpg/gif/doc/docx/pdf extension");
                return false;
            }
            else if (fileName.split(".")[1].toUpperCase() == "PNG" || fileName.split(".")[1].toUpperCase() == "JPEG" || fileName.split(".")[1].toUpperCase() == "JPG" || fileName.split(".")[1].toUpperCase() == "GIF" || fileName.split(".")[1].toUpperCase() == "PDF" || fileName.split(".")[1].toUpperCase() == "DOC" || fileName.split(".")[1].toUpperCase() == "DOCX")
                return true;
            else {
                alert("File with " + fileName.split(".")[1] + " is invalid. Upload a valid File with png/jpg/jpeg/gif/doc/docx/pdf extensions");
                el.value = "";
                return false;
            }
            return true;
        }
    </script>
    <script type="text/javascript">
        jQuery.validator.addMethod("multiemail",
       function (value, element) {
           var email = value.split(/[;,]+/); // split element by , and ;
           valid = true;
           for (var i in email) {
               value = email[i];
               valid = valid && jQuery.validator.methods.email.call(this, $.trim(value), element);
           }
           return valid;
       },
    jQuery.validator.messages.multiemail
);
        $(function () {
            //$('#isReportingTo').hide();
            //$('.form-control').addClass('input-sm');
            $('#li_Employee').addClass('open');
            $('#li_empdir').addClass('active');
            @if (ViewData["RoleCode"].ToString()==UTILITY.ROLE_EMPLOYEE)
           {
               <text>
            //$("input[type=dropdownlist]").prop("disabled", true);
            $("#frmEmp :input").prop("disabled", true);
            $("#btnsave").hide();
            $("#btnback").removeAttr('disabled', true);
            </text>
           }
            $('.dtCss').datetimepicker({
                icons: {
                    time: 'fa fa-clock-o',
                    date: 'fa fa-calendar',
                    up: 'fa fa-arrow-up',
                    down: 'fa fa-arrow-down',
                    previous: 'fa fa-arrow-left',
                    next: 'fa fa-arrow-right'
                },
                format: dateFormat
            });

            $('#loginEmail').val($('#empHeader_UserEmailId').val());
        });
        function appendEmail(el, employeeid) {
            $.ajax({
                url: '@Url.Content("~/Employee/IsEmailExists?Email=")' + $('#empHeader_UserEmailId').val() + '&Employeeid=' + employeeid,
                method: 'get',
                contentType: 'Json',
                success: function (result) {
                    if (result == "True") {
                        $('#error').show();
                        $('#empHeader_UserEmailId').val('');
                        $('#error').fadeOut(5000);
                    }
                    else {
                        $('#error').hide();
                        $('#loginEmail').val($('#empHeader_UserEmailId').val());
                    }
                },
                error: function (err) {
                    return result;
                }

            });
        }

        $('#frmEmp').validate({
            rules: {
                'empHeader.IDType': {
                    required: true
                },
                'empWorkDetail.JoiningDate': {
                    required: true
                },
                'empHeader.FirstName': {
                    required: true,
                    maxlength: 30,

                },
                'empHeader.MiddleName': {
                    maxlength: 30
                },
                'empHeader.LastName': {
                    required: true,
                    maxlength: 30
                },
                'empPersonalDetail.FatherName': {
                    maxlength: 30
                },

                'empPersonalDetail.DOB': {
                    required: true
                },
                'address.Email': {
                    required: true,
                    email: true,


                },
                'address.MobileNo': {
                    required: true,
                    maxlength: 15
                },
                'empHeader.Nationality': {
                    required: true
                },
                'empPersonalDetail.MaritalStatus': {
                    required: true
                },
                'empWorkDetail.ConfirmationDate': {
                    required: true
                },
                'address.Address1': {
                    required: true,
                },
                'address.CityName': {
                    required: true,
                },
                'address.CountryCode': {
                    required: true,
                },
                'empHeader.UserEmailId': {
                    required: true,
                    email: true
                    //multiemail: true
                },
                'empHeader.Password': {
                    required: true,
                    maxlength: 15,
                    minlength: 5
                },
                'empHeader.ConfirmPassword': {
                    required: true,
                    equalTo: '#empHeader_Password'
                },

                'empWorkDetail.DesignationId': {
                    required: true
                },
                'empPersonalDetail.PasspostNo': {
                    required: true
                },
                'empWorkDetail.SendMailsTo': {
                    multiemail: true
                }
                //'empBankdetail.BankName': {
                //    required: true
                //},
                //'empBankdetail.AccountNo': {
                //    required: true
                //},
                //'empBankdetail.AccountType': {
                //    required: true
                //}
            },
            messages: {
                'empWorkDetail.SendMailsTo': "Enter correct Email ID"
            }
        });


        function SaveEmployee() {
            if ($('#frmEmp').valid()) {
                $('#frmEmp').submit();
                swal({
                    title: "Saved Successfully",
                    text: "",
                    closeOnConfirm: true,
                    confirmButtonText: "Ok",
                    confirmButtonClass: "btn-primary",
                    timer: 5000
                },
                       function () {
                           $.loader({
                               className: "blue-with-image-2",
                               content: '',
                           });
                       })
            }
            else {
                swal("Incorrect Inputs");
            }

        }
        //$('.maxlength').keypress(function (e) {
        //    debugger;
        //    var Value = e.target.value;
        //    var length = Value.length;
        //    if (length >= 30) {
        //        e.preventDefault();
        //        return false;
        //    }
        //    else {
        //        return true;
        //    }
        //});


    </script>
}

